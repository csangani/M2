/* The following code was generated by JFlex 1.5.1 */

/*
 *
 *  Copyright (c) 2014, Stanford University
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *  1. Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *  2. Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in the
 *     documentation and/or other materials provided with the distribution.
 *  3. All advertising materials mentioning features or use of this software
 *     must display the following acknowledgement:
 *     This product includes software developed by the <organization>.
 *  4. Neither the name of the <organization> nor the
 *     names of its contributors may be used to endorse or promote products
 *     derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY <COPYRIGHT HOLDER> ''AS IS'' AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *  
 *  AUTHOR: Chirag Sangani (csangani@stanford.edu)
 *
 */

package edu.stanford.cs.m2.document.parse;

import edu.stanford.cs.m2.document.FilePosition;

/*
 *  This is a JFlex-compatible lexical specification of the ANSI C grammar. The
 *  specification was originally sourced from
 *  http://www.lysator.liu.se/c/ANSI-C-grammar-l.html
 */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.1
 * from the specification file <tt>./C.flex</tt>
 */
public class CParser extends Parser {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\102\1\15\1\52\1\53\1\14\22\0\1\102\1\66\1\55"+
    "\1\20\1\0\1\62\1\63\1\50\1\74\1\75\1\17\1\61\1\72"+
    "\1\5\1\54\1\16\1\46\11\1\1\73\1\67\1\60\1\57\1\56"+
    "\1\101\1\0\4\3\1\4\1\7\5\2\1\11\10\2\1\13\2\2"+
    "\1\47\2\2\1\76\1\51\1\77\1\64\1\2\1\0\1\21\1\24"+
    "\1\30\1\35\1\26\1\6\1\40\1\32\1\34\1\2\1\27\1\10"+
    "\1\36\1\33\1\23\1\44\1\2\1\25\1\31\1\22\1\12\1\45"+
    "\1\42\1\37\1\43\1\41\1\70\1\65\1\71\1\100\6\0\1\52"+
    "\u1fa2\0\1\52\1\52\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\4\3\1\5\1\6"+
    "\1\7\1\1\14\3\1\2\1\1\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\0\2\2"+
    "\1\41\1\42\1\43\3\3\1\0\1\3\2\0\1\44"+
    "\1\45\1\0\1\46\16\3\1\47\1\3\1\50\4\3"+
    "\4\0\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\2\1\0\1\2\1\3\1\73"+
    "\3\3\2\74\2\0\21\3\1\75\6\3\1\2\1\76"+
    "\1\77\1\100\1\3\1\101\2\3\1\0\1\102\4\3"+
    "\1\103\1\104\1\3\1\105\2\3\1\106\10\3\1\107"+
    "\2\3\1\110\1\111\1\3\1\112\1\3\1\113\4\3"+
    "\1\114\2\3\1\115\5\3\1\116\3\3\1\117\1\3"+
    "\1\120\1\3\1\121\1\122\1\123\1\124\1\125\1\126"+
    "\3\3\1\127\2\3\1\130\1\3\1\131\1\132\1\133"+
    "\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\206\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\206\0\u0754\0\u0797"+
    "\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\206"+
    "\0\206\0\206\0\206\0\u09af\0\206\0\206\0\206\0\206"+
    "\0\206\0\206\0\u09f2\0\u0a35\0\206\0\u0a78\0\u0abb\0\u0afe"+
    "\0\206\0\206\0\206\0\u0b41\0\u0b84\0\u0bc7\0\u06ce\0\u0c0a"+
    "\0\u0c4d\0\u0c90\0\206\0\206\0\u0324\0\206\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e"+
    "\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u010c\0\u107d\0\u10c0\0\u1103"+
    "\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b"+
    "\0\206\0\206\0\206\0\u135e\0\206\0\206\0\206\0\206"+
    "\0\206\0\206\0\206\0\206\0\206\0\206\0\206\0\206"+
    "\0\206\0\u13a1\0\u13e4\0\206\0\u1427\0\u010c\0\u146a\0\u14ad"+
    "\0\u14f0\0\u1533\0\206\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682"+
    "\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a"+
    "\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u010c\0\u1a6f"+
    "\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\206\0\206"+
    "\0\206\0\u1c44\0\u010c\0\u1c87\0\u1cca\0\u1d0d\0\u010c\0\u1d50"+
    "\0\u1d93\0\u1dd6\0\u1e19\0\u010c\0\u010c\0\u1e5c\0\u010c\0\u1e9f"+
    "\0\u1ee2\0\u010c\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074"+
    "\0\u20b7\0\u20fa\0\u010c\0\u213d\0\u2180\0\u010c\0\u010c\0\u21c3"+
    "\0\u010c\0\u2206\0\u010c\0\u2249\0\u228c\0\u22cf\0\u2312\0\u010c"+
    "\0\u2355\0\u2398\0\u010c\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7"+
    "\0\u010c\0\u252a\0\u256d\0\u25b0\0\u010c\0\u25f3\0\u010c\0\u2636"+
    "\0\u010c\0\u010c\0\u010c\0\u010c\0\u010c\0\u010c\0\u2679\0\u26bc"+
    "\0\u26ff\0\u010c\0\u2742\0\u2785\0\u010c\0\u27c8\0\u010c\0\u010c"+
    "\0\u010c\0\u010c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\3\5\1\6\1\7\1\5\1\10\1\11"+
    "\1\12\1\5\1\0\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\5\1\21\1\22\1\23\1\5\1\24\1\25"+
    "\2\5\1\26\1\27\2\5\1\30\1\5\1\31\2\5"+
    "\1\32\1\33\1\5\1\34\1\3\1\0\1\13\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\13\14\63\2\0"+
    "\33\63\1\64\3\63\1\65\25\63\104\0\1\4\2\0"+
    "\1\66\3\0\4\67\12\0\1\66\17\0\1\4\5\0"+
    "\1\70\27\0\4\5\1\0\6\5\5\0\27\5\40\0"+
    "\1\71\50\0\1\72\1\73\24\0\4\5\1\0\2\5"+
    "\1\74\3\5\5\0\2\5\1\75\24\5\34\0\4\5"+
    "\1\0\6\5\5\0\2\5\1\76\24\5\34\0\4\5"+
    "\1\0\6\5\5\0\27\5\1\77\33\0\4\5\1\0"+
    "\6\5\5\0\12\5\1\100\14\5\51\0\1\101\1\102"+
    "\37\0\1\103\102\0\1\104\23\0\14\105\2\106\65\105"+
    "\1\0\4\5\1\0\4\5\1\107\1\5\5\0\27\5"+
    "\34\0\4\5\1\0\6\5\5\0\22\5\1\110\4\5"+
    "\34\0\4\5\1\0\6\5\5\0\4\5\1\111\22\5"+
    "\34\0\4\5\1\0\6\5\5\0\5\5\1\112\21\5"+
    "\34\0\4\5\1\0\2\5\1\113\3\5\5\0\12\5"+
    "\1\114\3\5\1\115\10\5\34\0\4\5\1\0\6\5"+
    "\5\0\1\116\1\5\1\117\6\5\1\120\15\5\34\0"+
    "\4\5\1\0\6\5\5\0\1\5\1\121\7\5\1\122"+
    "\1\5\1\123\5\5\1\124\5\5\34\0\4\5\1\0"+
    "\1\125\5\5\5\0\12\5\1\126\14\5\34\0\4\5"+
    "\1\0\6\5\5\0\2\5\1\127\2\5\1\130\21\5"+
    "\34\0\4\5\1\0\6\5\5\0\2\5\1\131\24\5"+
    "\34\0\4\5\1\0\6\5\5\0\11\5\1\132\15\5"+
    "\34\0\4\5\1\0\6\5\5\0\2\5\1\133\24\5"+
    "\34\0\1\4\2\0\1\66\3\0\4\67\12\0\1\66"+
    "\10\0\1\134\6\0\1\4\1\134\4\0\1\70\26\0"+
    "\50\135\1\0\1\136\31\135\1\0\1\70\44\0\1\70"+
    "\5\0\1\137\104\0\1\140\1\141\102\0\1\142\102\0"+
    "\1\143\1\144\1\0\1\51\10\0\1\57\66\0\1\145"+
    "\1\0\1\146\77\0\1\52\1\147\102\0\1\150\3\0"+
    "\1\151\76\0\1\152\102\0\1\153\5\0\1\154\74\0"+
    "\1\155\101\0\1\60\24\0\14\63\2\0\33\63\1\0"+
    "\3\63\1\0\25\63\22\0\1\156\2\0\1\157\5\0"+
    "\1\160\21\0\1\161\26\0\1\162\3\0\1\163\40\0"+
    "\1\162\12\0\1\163\31\0\4\67\70\0\1\70\2\0"+
    "\1\66\1\0\4\164\14\0\1\66\17\0\1\70\35\0"+
    "\4\5\1\0\6\5\5\0\2\5\1\165\24\5\34\0"+
    "\4\5\1\0\6\5\5\0\4\5\1\166\22\5\34\0"+
    "\4\5\1\0\6\5\5\0\12\5\1\167\14\5\34\0"+
    "\4\5\1\0\6\5\5\0\10\5\1\170\2\5\1\171"+
    "\13\5\33\0\14\101\1\172\1\173\65\101\17\174\1\175"+
    "\63\174\1\0\4\5\1\0\6\5\5\0\1\5\1\176"+
    "\25\5\34\0\4\5\1\0\6\5\5\0\23\5\1\177"+
    "\3\5\34\0\4\5\1\0\6\5\5\0\5\5\1\200"+
    "\21\5\34\0\4\5\1\0\6\5\5\0\1\5\1\201"+
    "\15\5\1\202\7\5\34\0\4\5\1\0\6\5\5\0"+
    "\10\5\1\203\16\5\34\0\4\5\1\0\4\5\1\204"+
    "\1\5\5\0\27\5\34\0\4\5\1\0\6\5\5\0"+
    "\1\5\1\205\25\5\34\0\4\5\1\0\6\5\5\0"+
    "\10\5\1\206\16\5\34\0\4\5\1\0\6\5\5\0"+
    "\12\5\1\207\14\5\34\0\4\5\1\0\6\5\5\0"+
    "\1\210\26\5\34\0\4\5\1\0\6\5\5\0\1\211"+
    "\3\5\1\212\22\5\34\0\4\5\1\0\6\5\5\0"+
    "\2\5\1\213\24\5\34\0\4\5\1\0\6\5\5\0"+
    "\17\5\1\214\1\215\6\5\34\0\4\5\1\0\6\5"+
    "\5\0\13\5\1\216\13\5\34\0\4\5\1\0\6\5"+
    "\5\0\1\5\1\217\25\5\34\0\4\5\1\0\4\5"+
    "\1\220\1\5\5\0\27\5\34\0\4\5\1\0\1\221"+
    "\5\5\5\0\27\5\34\0\4\5\1\0\6\5\5\0"+
    "\1\5\1\222\25\5\34\0\4\5\1\0\6\5\5\0"+
    "\13\5\1\223\13\5\34\0\4\5\1\0\2\5\1\224"+
    "\3\5\5\0\13\5\1\225\13\5\34\0\1\226\1\0"+
    "\2\226\1\0\2\226\11\0\1\226\2\0\1\226\1\0"+
    "\1\226\1\0\1\226\4\0\1\226\10\0\1\226\34\0"+
    "\50\135\1\164\1\136\45\135\2\0\34\135\2\0\27\135"+
    "\54\0\1\227\105\0\1\230\102\0\1\231\24\0\1\162"+
    "\4\0\4\164\34\0\1\162\35\0\1\162\44\0\1\162"+
    "\35\0\4\5\1\0\6\5\5\0\1\232\26\5\34\0"+
    "\4\5\1\0\6\5\5\0\17\5\1\233\7\5\34\0"+
    "\4\5\1\0\6\5\5\0\13\5\1\234\13\5\34\0"+
    "\4\5\1\0\6\5\5\0\2\5\1\235\24\5\50\0"+
    "\1\173\65\0\17\174\1\236\63\174\16\0\1\173\1\175"+
    "\64\0\4\5\1\0\6\5\5\0\2\5\1\237\24\5"+
    "\34\0\4\5\1\0\6\5\5\0\5\5\1\240\21\5"+
    "\34\0\4\5\1\0\6\5\5\0\1\241\26\5\34\0"+
    "\4\5\1\0\4\5\1\242\1\5\5\0\27\5\34\0"+
    "\4\5\1\0\6\5\5\0\13\5\1\243\13\5\34\0"+
    "\4\5\1\0\6\5\5\0\5\5\1\244\21\5\34\0"+
    "\4\5\1\0\6\5\5\0\15\5\1\245\11\5\34\0"+
    "\4\5\1\0\6\5\5\0\5\5\1\246\21\5\34\0"+
    "\4\5\1\0\6\5\5\0\5\5\1\247\21\5\34\0"+
    "\4\5\1\0\6\5\5\0\1\5\1\250\6\5\1\251"+
    "\16\5\34\0\4\5\1\0\6\5\5\0\4\5\1\252"+
    "\22\5\34\0\4\5\1\0\6\5\5\0\1\5\1\253"+
    "\25\5\34\0\4\5\1\0\4\5\1\254\1\5\5\0"+
    "\27\5\34\0\4\5\1\0\6\5\5\0\4\5\1\255"+
    "\22\5\34\0\4\5\1\0\6\5\5\0\12\5\1\256"+
    "\14\5\34\0\4\5\1\0\6\5\5\0\5\5\1\257"+
    "\21\5\34\0\4\5\1\0\6\5\5\0\1\5\1\260"+
    "\25\5\34\0\4\5\1\0\6\5\5\0\3\5\1\261"+
    "\23\5\34\0\4\5\1\0\6\5\5\0\1\262\26\5"+
    "\34\0\4\5\1\0\6\5\5\0\2\5\1\263\24\5"+
    "\34\0\4\5\1\0\2\5\1\264\3\5\5\0\27\5"+
    "\34\0\4\5\1\0\6\5\5\0\1\265\26\5\34\0"+
    "\4\5\1\0\6\5\5\0\14\5\1\266\12\5\34\0"+
    "\1\226\1\0\2\226\1\0\2\226\4\67\5\0\1\226"+
    "\2\0\1\226\1\0\1\226\1\0\1\226\4\0\1\226"+
    "\10\0\1\226\35\0\4\5\1\0\6\5\5\0\1\5"+
    "\1\267\25\5\34\0\4\5\1\0\6\5\5\0\17\5"+
    "\1\270\7\5\34\0\4\5\1\0\6\5\5\0\12\5"+
    "\1\271\14\5\33\0\16\174\1\173\1\236\63\174\1\0"+
    "\4\5\1\0\6\5\5\0\14\5\1\272\12\5\34\0"+
    "\4\5\1\0\6\5\5\0\6\5\1\273\20\5\34\0"+
    "\4\5\1\0\6\5\5\0\4\5\1\274\22\5\34\0"+
    "\4\5\1\0\6\5\5\0\10\5\1\275\16\5\34\0"+
    "\4\5\1\0\6\5\5\0\4\5\1\276\22\5\34\0"+
    "\4\5\1\0\6\5\5\0\13\5\1\277\13\5\34\0"+
    "\4\5\1\0\6\5\5\0\1\5\1\300\25\5\34\0"+
    "\4\5\1\0\6\5\5\0\13\5\1\301\13\5\34\0"+
    "\4\5\1\0\6\5\5\0\7\5\1\302\17\5\34\0"+
    "\4\5\1\0\6\5\5\0\1\5\1\303\25\5\34\0"+
    "\4\5\1\0\6\5\5\0\5\5\1\304\21\5\34\0"+
    "\4\5\1\0\6\5\5\0\2\5\1\305\24\5\34\0"+
    "\4\5\1\0\6\5\5\0\7\5\1\306\17\5\34\0"+
    "\4\5\1\0\2\5\1\307\3\5\5\0\27\5\34\0"+
    "\4\5\1\0\4\5\1\310\1\5\5\0\27\5\34\0"+
    "\4\5\1\0\6\5\5\0\5\5\1\311\21\5\34\0"+
    "\4\5\1\0\6\5\5\0\1\5\1\312\25\5\34\0"+
    "\4\5\1\0\6\5\5\0\12\5\1\313\14\5\34\0"+
    "\4\5\1\0\6\5\5\0\5\5\1\314\21\5\34\0"+
    "\4\5\1\0\6\5\5\0\12\5\1\315\14\5\34\0"+
    "\4\5\1\0\6\5\5\0\1\5\1\316\25\5\34\0"+
    "\4\5\1\0\6\5\5\0\12\5\1\317\14\5\34\0"+
    "\4\5\1\0\6\5\5\0\12\5\1\320\14\5\34\0"+
    "\4\5\1\0\6\5\5\0\7\5\1\321\17\5\34\0"+
    "\4\5\1\0\6\5\5\0\1\5\1\322\25\5\34\0"+
    "\4\5\1\0\6\5\5\0\14\5\1\323\12\5\34\0"+
    "\4\5\1\0\1\324\5\5\5\0\27\5\34\0\4\5"+
    "\1\0\6\5\5\0\11\5\1\325\15\5\34\0\4\5"+
    "\1\0\6\5\5\0\5\5\1\326\21\5\34\0\4\5"+
    "\1\0\2\5\1\327\3\5\5\0\27\5\34\0\4\5"+
    "\1\0\6\5\5\0\13\5\1\330\13\5\34\0\4\5"+
    "\1\0\6\5\5\0\5\5\1\331\21\5\34\0\4\5"+
    "\1\0\1\332\5\5\5\0\27\5\34\0\4\5\1\0"+
    "\6\5\5\0\5\5\1\333\21\5\34\0\4\5\1\0"+
    "\4\5\1\334\1\5\5\0\27\5\34\0\4\5\1\0"+
    "\6\5\5\0\1\5\1\335\25\5\34\0\4\5\1\0"+
    "\2\5\1\336\3\5\5\0\27\5\34\0\4\5\1\0"+
    "\6\5\5\0\14\5\1\337\12\5\34\0\4\5\1\0"+
    "\6\5\5\0\4\5\1\340\22\5\34\0\4\5\1\0"+
    "\6\5\5\0\5\5\1\341\21\5\34\0\4\5\1\0"+
    "\6\5\5\0\5\5\1\342\21\5\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10251];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\7\1\1\11\22\1\1\11\11\1\4\11"+
    "\1\1\6\11\2\1\1\11\1\0\2\1\3\11\3\1"+
    "\1\0\1\1\2\0\2\11\1\0\1\11\25\1\4\0"+
    "\1\1\3\11\1\1\15\11\1\1\1\0\1\11\6\1"+
    "\1\11\2\0\31\1\3\11\4\1\1\0\104\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(Token token) {
    return new Symbol(token, new FilePosition(yyline, yycolumn, yychar), yytext());
  }

  private Symbol symbol(Token token, String value) {
    return new Symbol(token, new FilePosition(yyline, yycolumn, yychar), value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CParser(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CParser(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return symbol(CToken.UNKNOWN);
          }
        case 93: break;
        case 2: 
          { return symbol(CToken.CONSTANT);
          }
        case 94: break;
        case 3: 
          { return symbol(CToken.IDENTIFIER);
          }
        case 95: break;
        case 4: 
          { return symbol(CToken.MINUS);
          }
        case 96: break;
        case 5: 
          { /* Ignore */
          }
        case 97: break;
        case 6: 
          { return symbol(CToken.SLASH);
          }
        case 98: break;
        case 7: 
          { return symbol(CToken.ASTERISK);
          }
        case 99: break;
        case 8: 
          { return symbol(CToken.PERIOD);
          }
        case 100: break;
        case 9: 
          { string.setLength(0); yybegin(STRING);
          }
        case 101: break;
        case 10: 
          { return symbol(CToken.GT);
          }
        case 102: break;
        case 11: 
          { return symbol(CToken.ASSIGN);
          }
        case 103: break;
        case 12: 
          { return symbol(CToken.LT);
          }
        case 104: break;
        case 13: 
          { return symbol(CToken.PLUS);
          }
        case 105: break;
        case 14: 
          { return symbol(CToken.MOD);
          }
        case 106: break;
        case 15: 
          { return symbol(CToken.AMPERSAND);
          }
        case 107: break;
        case 16: 
          { return symbol(CToken.HAT);
          }
        case 108: break;
        case 17: 
          { return symbol(CToken.OR);
          }
        case 109: break;
        case 18: 
          { return symbol(CToken.EXCLAMATION);
          }
        case 110: break;
        case 19: 
          { return symbol(CToken.SEMICOLON);
          }
        case 111: break;
        case 20: 
          { return symbol(CToken.LEFT_BRACE);
          }
        case 112: break;
        case 21: 
          { return symbol(CToken.RIGHT_BRACE);
          }
        case 113: break;
        case 22: 
          { return symbol(CToken.COMMA);
          }
        case 114: break;
        case 23: 
          { return symbol(CToken.COLON);
          }
        case 115: break;
        case 24: 
          { return symbol(CToken.LEFT_BRACKET);
          }
        case 116: break;
        case 25: 
          { return symbol(CToken.RIGHT_BRACKET);
          }
        case 117: break;
        case 26: 
          { return symbol(CToken.LEFT_SQBR);
          }
        case 118: break;
        case 27: 
          { return symbol(CToken.RIGHT_SQBR);
          }
        case 119: break;
        case 28: 
          { return symbol(CToken.TILDE);
          }
        case 120: break;
        case 29: 
          { return symbol(CToken.QUESTION);
          }
        case 121: break;
        case 30: 
          { string.append(yytext());
          }
        case 122: break;
        case 31: 
          { string.append("\\\'");
          }
        case 123: break;
        case 32: 
          { yybegin(YYINITIAL);
                                return symbol(CToken.STRING_LITERAL, ' ' + string.toString() + ' ');
          }
        case 124: break;
        case 33: 
          { return symbol(CToken.DEC_OP);
          }
        case 125: break;
        case 34: 
          { return symbol(CToken.PTR_OP);
          }
        case 126: break;
        case 35: 
          { return symbol(CToken.SUB_ASSIGN);
          }
        case 127: break;
        case 36: 
          { return symbol(CToken.DIV_ASSIGN);
          }
        case 128: break;
        case 37: 
          { return symbol(CToken.MUL_ASSIGN);
          }
        case 129: break;
        case 38: 
          { return symbol(CToken.PREPROCESSOR);
          }
        case 130: break;
        case 39: 
          { return symbol(CToken.IF);
          }
        case 131: break;
        case 40: 
          { return symbol(CToken.DO);
          }
        case 132: break;
        case 41: 
          { return symbol(CToken.RIGHT_OP);
          }
        case 133: break;
        case 42: 
          { return symbol(CToken.GE_OP);
          }
        case 134: break;
        case 43: 
          { return symbol(CToken.EQ_OP);
          }
        case 135: break;
        case 44: 
          { return symbol(CToken.LE_OP);
          }
        case 136: break;
        case 45: 
          { return symbol(CToken.LEFT_OP);
          }
        case 137: break;
        case 46: 
          { return symbol(CToken.ADD_ASSIGN);
          }
        case 138: break;
        case 47: 
          { return symbol(CToken.INC_OP);
          }
        case 139: break;
        case 48: 
          { return symbol(CToken.MOD_ASSIGN);
          }
        case 140: break;
        case 49: 
          { return symbol(CToken.AND_ASSIGN);
          }
        case 141: break;
        case 50: 
          { return symbol(CToken.AND_OP);
          }
        case 142: break;
        case 51: 
          { return symbol(CToken.XOR_ASSIGN);
          }
        case 143: break;
        case 52: 
          { return symbol(CToken.OR_ASSIGN);
          }
        case 144: break;
        case 53: 
          { return symbol(CToken.OR_OP);
          }
        case 145: break;
        case 54: 
          { return symbol(CToken.NE_OP);
          }
        case 146: break;
        case 55: 
          { string.append("\\t");
          }
        case 147: break;
        case 56: 
          { string.append("\\r");
          }
        case 148: break;
        case 57: 
          { string.append("\\n");
          }
        case 149: break;
        case 58: 
          { string.append("\\\"");
          }
        case 150: break;
        case 59: 
          { return symbol(CToken.FOR);
          }
        case 151: break;
        case 60: 
          { return symbol(CToken.COMMENT);
          }
        case 152: break;
        case 61: 
          { return symbol(CToken.INT);
          }
        case 153: break;
        case 62: 
          { return symbol(CToken.ELLIPSIS);
          }
        case 154: break;
        case 63: 
          { return symbol(CToken.RIGHT_ASSIGN);
          }
        case 155: break;
        case 64: 
          { return symbol(CToken.LEFT_ASSIGN);
          }
        case 156: break;
        case 65: 
          { return symbol(CToken.LONG);
          }
        case 157: break;
        case 66: 
          { return symbol(CToken.AUTO);
          }
        case 158: break;
        case 67: 
          { return symbol(CToken.ELSE);
          }
        case 159: break;
        case 68: 
          { return symbol(CToken.ENUM);
          }
        case 160: break;
        case 69: 
          { return symbol(CToken.CASE);
          }
        case 161: break;
        case 70: 
          { return symbol(CToken.CHAR);
          }
        case 162: break;
        case 71: 
          { return symbol(CToken.GOTO);
          }
        case 163: break;
        case 72: 
          { return symbol(CToken.VOID);
          }
        case 164: break;
        case 73: 
          { return symbol(CToken.FLOAT);
          }
        case 165: break;
        case 74: 
          { return symbol(CToken.UNION);
          }
        case 166: break;
        case 75: 
          { return symbol(CToken.BREAK);
          }
        case 167: break;
        case 76: 
          { return symbol(CToken.CONST);
          }
        case 168: break;
        case 77: 
          { return symbol(CToken.SHORT);
          }
        case 169: break;
        case 78: 
          { return symbol(CToken.WHILE);
          }
        case 170: break;
        case 79: 
          { return symbol(CToken.RETURN);
          }
        case 171: break;
        case 80: 
          { return symbol(CToken.EXTERN);
          }
        case 172: break;
        case 81: 
          { return symbol(CToken.STATIC);
          }
        case 173: break;
        case 82: 
          { return symbol(CToken.STRUCT);
          }
        case 174: break;
        case 83: 
          { return symbol(CToken.SIGNED);
          }
        case 175: break;
        case 84: 
          { return symbol(CToken.SIZEOF);
          }
        case 176: break;
        case 85: 
          { return symbol(CToken.SWITCH);
          }
        case 177: break;
        case 86: 
          { return symbol(CToken.DOUBLE);
          }
        case 178: break;
        case 87: 
          { return symbol(CToken.TYPEDEF);
          }
        case 179: break;
        case 88: 
          { return symbol(CToken.DEFAULT);
          }
        case 180: break;
        case 89: 
          { return symbol(CToken.UNSIGNED);
          }
        case 181: break;
        case 90: 
          { return symbol(CToken.REGISTER);
          }
        case 182: break;
        case 91: 
          { return symbol(CToken.CONTINUE);
          }
        case 183: break;
        case 92: 
          { return symbol(CToken.VOLATILE);
          }
        case 184: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
